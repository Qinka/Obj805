
\begin{code}
module Obj805.Server.Handler
       ( postSetR
       , postGetR
       ) where
\end{code}


import
\begin{code}
import Import
import Import.Yesod
import qualified Import.Text as T

import Obj805.Server.Code
\end{code}


for setting
\begin{code}
postSetR :: Handler TypedContent
postSetR = do
  speed <- lookupPostParam "speed"
  case speed of
    Just s' -> do
      Core{..} <- getYesod
      let s = read s'
      liftIO . atomically $ do
          writeTVar regSignal s
          signalTSem sendSignal
      selectRep $ provideJson $
        object [ "status" .= "success"
               ]
    _ -> selectRep $ provideJson $
      object [ "status"  .= "error"
             , "context" .= "can not find arg(speed)"
             ]
postGetR :: Handler TypedContent
postGetR = do
  Core{..} <- getYesod
  webSockets . forever $ do
    x <- liftIO $ atomically $ do
      waitTSem sendSignal
      readTVar regSignal
    sendTextData $ pack $ show x
  i <- readTVarIO regSignal
  selectRep $ provideJson $
    object [ "status"  .= "success"
           , "context" .= show i
           ]
\end{code}
